[gd_scene load_steps=70 format=3 uid="uid://cktfdk2f1lwm4"]

[ext_resource type="Script" path="res://Player/player.gd" id="1_jmvu1"]
[ext_resource type="Texture2D" uid="uid://bjj2k4ncdisgg" path="res://Assets/MiniWorldSprites/Characters/knight/Run.png" id="2_1jnj7"]
[ext_resource type="Texture2D" uid="uid://wnj4y5ckulh3" path="res://Assets/MiniWorldSprites/Characters/knight/Death.png" id="2_5rplv"]
[ext_resource type="Shader" path="res://Assets/ShadersThemesFonts/hurt.gdshader" id="2_7up4d"]
[ext_resource type="Texture2D" uid="uid://cetr7ol3ofngx" path="res://Assets/MiniWorldSprites/Characters/knight/Idle.png" id="3_cv2sl"]
[ext_resource type="Texture2D" uid="uid://dbnxkh4a026c5" path="res://Assets/MiniWorldSprites/Characters/knight/Attacks.png" id="4_fq2ox"]
[ext_resource type="Texture2D" uid="uid://b8ttrka8as603" path="res://Assets/MiniWorldSprites/Characters/knight/Jump.png" id="4_jecpc"]
[ext_resource type="Texture2D" uid="uid://di17ebky67oqh" path="res://Assets/MiniWorldSprites/Characters/knight/Roll.png" id="6_7aoml"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5sxy7"]
shader = ExtResource("2_7up4d")
shader_parameter/whiteout = 0.0
shader_parameter/noise_intensity = 6.0

[sub_resource type="AtlasTexture" id="AtlasTexture_d0tbt"]
atlas = ExtResource("6_7aoml")
region = Rect2(128, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_mg2ox"]
atlas = ExtResource("2_5rplv")
region = Rect2(0, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_jdr7k"]
atlas = ExtResource("2_5rplv")
region = Rect2(128, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_23h56"]
atlas = ExtResource("2_5rplv")
region = Rect2(0, 64, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_tg02o"]
atlas = ExtResource("2_5rplv")
region = Rect2(128, 64, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_bohwb"]
atlas = ExtResource("2_1jnj7")
region = Rect2(0, 128, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_630si"]
atlas = ExtResource("2_1jnj7")
region = Rect2(128, 128, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_i3iv6"]
atlas = ExtResource("3_cv2sl")
region = Rect2(0, 1, 127, 63)

[sub_resource type="AtlasTexture" id="AtlasTexture_pgi5q"]
atlas = ExtResource("3_cv2sl")
region = Rect2(128, 1, 127, 63)

[sub_resource type="AtlasTexture" id="AtlasTexture_pbk1x"]
atlas = ExtResource("3_cv2sl")
region = Rect2(0, 65, 127, 63)

[sub_resource type="AtlasTexture" id="AtlasTexture_v7xdy"]
atlas = ExtResource("3_cv2sl")
region = Rect2(128, 65, 127, 63)

[sub_resource type="AtlasTexture" id="AtlasTexture_wm472"]
atlas = ExtResource("3_cv2sl")
region = Rect2(0, 129, 127, 63)

[sub_resource type="AtlasTexture" id="AtlasTexture_42ijv"]
atlas = ExtResource("3_cv2sl")
region = Rect2(128, 129, 127, 63)

[sub_resource type="AtlasTexture" id="AtlasTexture_5f5ye"]
atlas = ExtResource("3_cv2sl")
region = Rect2(0, 193, 127, 63)

[sub_resource type="AtlasTexture" id="AtlasTexture_7hqtl"]
atlas = ExtResource("3_cv2sl")
region = Rect2(128, 193, 127, 63)

[sub_resource type="AtlasTexture" id="AtlasTexture_v4q63"]
atlas = ExtResource("4_jecpc")
region = Rect2(0, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_edv2h"]
atlas = ExtResource("4_jecpc")
region = Rect2(128, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_k5iux"]
atlas = ExtResource("4_jecpc")
region = Rect2(0, 64, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_r0o2n"]
atlas = ExtResource("4_jecpc")
region = Rect2(128, 64, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_f1xo5"]
atlas = ExtResource("4_jecpc")
region = Rect2(0, 128, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_jll3w"]
atlas = ExtResource("4_jecpc")
region = Rect2(128, 128, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_skmob"]
atlas = ExtResource("4_jecpc")
region = Rect2(0, 192, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_tsdcr"]
atlas = ExtResource("4_jecpc")
region = Rect2(128, 192, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_ybe2k"]
atlas = ExtResource("4_fq2ox")
region = Rect2(0, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_x25ni"]
atlas = ExtResource("4_fq2ox")
region = Rect2(128, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_faxrl"]
atlas = ExtResource("4_fq2ox")
region = Rect2(256, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_otacm"]
atlas = ExtResource("4_fq2ox")
region = Rect2(384, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_0gmuj"]
atlas = ExtResource("4_fq2ox")
region = Rect2(512, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_utxxl"]
atlas = ExtResource("4_fq2ox")
region = Rect2(640, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_pky5r"]
atlas = ExtResource("4_fq2ox")
region = Rect2(768, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_8pgrs"]
atlas = ExtResource("4_fq2ox")
region = Rect2(128, 64, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_kmyq5"]
atlas = ExtResource("6_7aoml")
region = Rect2(0, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_mxi1y"]
atlas = ExtResource("6_7aoml")
region = Rect2(0, 64, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_rntsn"]
atlas = ExtResource("6_7aoml")
region = Rect2(128, 64, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_0r68l"]
atlas = ExtResource("2_1jnj7")
region = Rect2(0, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_13mtm"]
atlas = ExtResource("2_1jnj7")
region = Rect2(128, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_0dmtq"]
atlas = ExtResource("2_1jnj7")
region = Rect2(0, 64, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_1igu4"]
atlas = ExtResource("2_1jnj7")
region = Rect2(128, 64, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_6wmn5"]
atlas = ExtResource("2_1jnj7")
region = Rect2(0, 128, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_h8hg1"]
atlas = ExtResource("2_1jnj7")
region = Rect2(128, 128, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_c2xg0"]
atlas = ExtResource("2_1jnj7")
region = Rect2(0, 192, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_mk5gy"]
atlas = ExtResource("2_1jnj7")
region = Rect2(128, 192, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_kechd"]
atlas = ExtResource("4_fq2ox")
region = Rect2(0, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_3wehx"]
atlas = ExtResource("4_fq2ox")
region = Rect2(128, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_ktoxt"]
atlas = ExtResource("4_fq2ox")
region = Rect2(256, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_8ard8"]
atlas = ExtResource("4_fq2ox")
region = Rect2(384, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_iwocb"]
atlas = ExtResource("4_fq2ox")
region = Rect2(512, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_j0xmt"]
atlas = ExtResource("4_fq2ox")
region = Rect2(640, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_jv64s"]
atlas = ExtResource("4_fq2ox")
region = Rect2(768, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_qsnqw"]
atlas = ExtResource("4_fq2ox")
region = Rect2(896, 0, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_uy727"]
atlas = ExtResource("4_fq2ox")
region = Rect2(0, 128, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_8yhu1"]
atlas = ExtResource("4_fq2ox")
region = Rect2(128, 128, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_1l8pe"]
atlas = ExtResource("4_fq2ox")
region = Rect2(256, 128, 128, 64)

[sub_resource type="AtlasTexture" id="AtlasTexture_de46m"]
atlas = ExtResource("4_fq2ox")
region = Rect2(384, 128, 128, 64)

[sub_resource type="SpriteFrames" id="SpriteFrames_lvf4y"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_d0tbt")
}],
"loop": true,
"name": &"attack_fall",
"speed": 13.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_mg2ox")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jdr7k")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_23h56")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tg02o")
}],
"loop": true,
"name": &"die",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_bohwb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_630si")
}],
"loop": true,
"name": &"fall",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_i3iv6")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pgi5q")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pbk1x")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_v7xdy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wm472")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_42ijv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5f5ye")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7hqtl")
}],
"loop": true,
"name": &"idle",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_v4q63")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_edv2h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_k5iux")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_r0o2n")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_f1xo5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jll3w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_skmob")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tsdcr")
}],
"loop": true,
"name": &"jump",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ybe2k")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_x25ni")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_faxrl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_otacm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0gmuj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_utxxl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pky5r")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8pgrs")
}],
"loop": true,
"name": &"primary_attack",
"speed": 12.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_kmyq5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d0tbt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mxi1y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rntsn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kmyq5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d0tbt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mxi1y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rntsn")
}],
"loop": true,
"name": &"roll",
"speed": 16.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_0r68l")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_13mtm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0dmtq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1igu4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6wmn5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_h8hg1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_c2xg0")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mk5gy")
}],
"loop": true,
"name": &"running",
"speed": 12.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_kechd")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3wehx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ktoxt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8ard8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_iwocb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_j0xmt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jv64s")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qsnqw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_uy727")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8yhu1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1l8pe")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_de46m")
}],
"loop": false,
"name": &"secondary_attack",
"speed": 12.0
}]

[sub_resource type="Shader" id="Shader_4ms6p"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's ParticleProcessMaterial.

shader_type particles;
render_mode disable_velocity;

uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float inherit_emitter_velocity_ratio = 0.0;
uniform float initial_linear_velocity_min;
uniform float initial_linear_velocity_max;
uniform float directional_velocity_min;
uniform float directional_velocity_max;
uniform float angular_velocity_min;
uniform float angular_velocity_max;
uniform float orbit_velocity_min;
uniform float orbit_velocity_max;
uniform float radial_velocity_min;
uniform float radial_velocity_max;
uniform float linear_accel_min;
uniform float linear_accel_max;
uniform float radial_accel_min;
uniform float radial_accel_max;
uniform float tangent_accel_min;
uniform float tangent_accel_max;
uniform float damping_min;
uniform float damping_max;
uniform float initial_angle_min;
uniform float initial_angle_max;
uniform float scale_min;
uniform float scale_max;
uniform float hue_variation_min;
uniform float hue_variation_max;
uniform float anim_speed_min;
uniform float anim_speed_max;
uniform float anim_offset_min;
uniform float anim_offset_max;
uniform float lifetime_randomness;
uniform vec3 emission_shape_offset = vec3(0.0);
uniform vec3 emission_shape_scale = vec3(1.0);
uniform vec3 velocity_pivot = vec3(0.0);
uniform float emission_sphere_radius;
uniform vec4 color_value : source_color;
uniform vec3 gravity;
uniform bool grounded = false;

vec2 is_grounded(vec2 vel){
	if(grounded){
		vel.y = -0.5f * abs(vel.y);
		vel.x = 0.75f;
	}
	return vel;
}

vec4 rotate_hue(vec4 current_color, float hue_rot_angle) {
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat =
			mat4(vec4(0.299, 0.587, 0.114, 0.0),
					vec4(0.299, 0.587, 0.114, 0.0),
					vec4(0.299, 0.587, 0.114, 0.0),
					vec4(0.000, 0.000, 0.000, 1.0)) +
			mat4(vec4(0.701, -0.587, -0.114, 0.0),
					vec4(-0.299, 0.413, -0.114, 0.0),
					vec4(-0.300, -0.588, 0.886, 0.0),
					vec4(0.000, 0.000, 0.000, 0.0)) *
					hue_rot_c +
			mat4(vec4(0.168, 0.330, -0.497, 0.0),
					vec4(-0.328, 0.035, 0.292, 0.0),
					vec4(1.250, -1.050, -0.203, 0.0),
					vec4(0.000, 0.000, 0.000, 0.0)) *
					hue_rot_s;
	return hue_rot_mat * current_color;
}

float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0) {
		s = 305420679;
	}
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0) {
		s += 2147483647;
	}
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

struct DisplayParameters {
	vec3 scale;
	float hue_rotation;
	float animation_speed;
	float animation_offset;
	float lifetime;
	vec4 color;
};

struct DynamicsParameters {
	float angle;
	float angular_velocity;
	float initial_velocity_multiplier;
	float directional_velocity;
	float radial_velocity;
	float orbit_velocity;
};

struct PhysicalParameters {
	float linear_accel;
	float radial_accel;
	float tangent_accel;
	float damping;
};

void calculate_initial_physical_params(inout PhysicalParameters params, inout uint alt_seed) {
	params.linear_accel = mix(linear_accel_min, linear_accel_max, rand_from_seed(alt_seed));
	params.radial_accel = mix(radial_accel_min, radial_accel_max, rand_from_seed(alt_seed));
	params.tangent_accel = mix(tangent_accel_min, tangent_accel_max, rand_from_seed(alt_seed));
	params.damping = mix(damping_min, damping_max, rand_from_seed(alt_seed));
}

void calculate_initial_dynamics_params(inout DynamicsParameters params, inout uint alt_seed) {
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	params.angle = mix(initial_angle_min, initial_angle_max, rand_from_seed(alt_seed));
	params.angular_velocity = mix(angular_velocity_min, angular_velocity_max, rand_from_seed(alt_seed));
	params.initial_velocity_multiplier = mix(initial_linear_velocity_min, initial_linear_velocity_max, rand_from_seed(alt_seed));
	params.directional_velocity = mix(directional_velocity_min, directional_velocity_max, rand_from_seed(alt_seed));
	params.radial_velocity = mix(radial_velocity_min, radial_velocity_max, rand_from_seed(alt_seed));
	params.orbit_velocity = mix(orbit_velocity_min, orbit_velocity_max, rand_from_seed(alt_seed));
}

void calculate_initial_display_params(inout DisplayParameters params, inout uint alt_seed) {
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	float pi = 3.14159;
	params.scale = vec3(mix(scale_min, scale_max, rand_from_seed(alt_seed)));
	params.scale = sign(params.scale) * max(abs(params.scale), 0.001);
	params.hue_rotation = pi * 2.0 * mix(hue_variation_min, hue_variation_max, rand_from_seed(alt_seed));
	params.animation_speed = mix(anim_speed_min, anim_speed_max, rand_from_seed(alt_seed));
	params.animation_offset = mix(anim_offset_min, anim_offset_max, rand_from_seed(alt_seed));
	params.lifetime = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
	params.color = color_value;
}

void process_display_param(inout DisplayParameters parameters, float lifetime) {
	// Compile-time add textures.
	parameters.color = rotate_hue(parameters.color, parameters.hue_rotation);
}

vec3 calculate_initial_position(inout uint alt_seed) {
	float pi = 3.14159;
	vec3 pos = vec3(0.0);
	{ // Emission shape.
		float s = rand_from_seed(alt_seed) * 2.0 - 1.0;
		float t = rand_from_seed(alt_seed) * 2.0 * pi;
		float p = rand_from_seed(alt_seed);
		float radius = emission_sphere_radius * sqrt(1.0 - s * s);
		pos = mix(vec3(0.0, 0.0, 0.0), vec3(radius * cos(t), radius * sin(t), emission_sphere_radius * s), p);
	}
	return pos * emission_shape_scale + emission_shape_offset;
}

vec3 process_orbit_displacement(DynamicsParameters param, float lifetime, inout uint alt_seed, mat4 transform, mat4 emission_transform, float delta, float total_lifetime) {
	if (abs(param.orbit_velocity) < 0.01 || delta < 0.001) {
		return vec3(0.0);
	}
	vec3 displacement = vec3(0.0);
	float pi = 3.14159;
	float orbit_amount = param.orbit_velocity;
	if (orbit_amount != 0.0) {
		vec3 pos = transform[3].xyz;
		vec3 org = emission_transform[3].xyz;
		vec3 diff = pos - org;
		float ang = orbit_amount * pi * 2.0 * delta;
		mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
		displacement.xy -= diff.xy;
		displacement.xy += rot * diff.xy;
	}
	return (emission_transform * vec4(displacement / delta, 0.0)).xyz;
}

vec3 get_random_direction_from_spread(inout uint alt_seed, float spread_angle) {
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	float spread_rad = spread_angle * degree_to_rad;
	float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
	angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
	vec3 spread_direction = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
	return spread_direction;
}

vec3 process_radial_displacement(DynamicsParameters param, float lifetime, inout uint alt_seed, mat4 transform, mat4 emission_transform, float delta) {
	vec3 radial_displacement = vec3(0.0);
	if (delta < 0.001) {
		return radial_displacement;
	}
	float radial_displacement_multiplier = 1.0;
	vec3 global_pivot = (emission_transform * vec4(velocity_pivot, 1.0)).xyz;
	if (length(transform[3].xyz - global_pivot) > 0.01) {
		radial_displacement = normalize(transform[3].xyz - global_pivot) * radial_displacement_multiplier * param.radial_velocity;
	} else {
		radial_displacement = get_random_direction_from_spread(alt_seed, 360.0) * param.radial_velocity;
	}
	if (radial_displacement_multiplier * param.radial_velocity < 0.0) {
		// Prevent inwards velocity to flicker once the point is reached.
		radial_displacement = normalize(radial_displacement) * min(abs(radial_displacement_multiplier * param.radial_velocity), length(transform[3].xyz - global_pivot) / delta);
	}
	return radial_displacement;
}

void process_physical_parameters(inout PhysicalParameters params, float lifetime_percent) {
}

void start() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	// Reset alt seed?
	//alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);
	process_display_param(params, 0.0);
	if (rand_from_seed(alt_seed) > AMOUNT_RATIO) {
		ACTIVE = false;
	}

	if (RESTART_CUSTOM) {
		CUSTOM = vec4(0.0);
		CUSTOM.w = params.lifetime;
		CUSTOM.x = dynamic_params.angle;
	}
	if (RESTART_COLOR) {
		COLOR = params.color;
	}
	if (RESTART_ROT_SCALE) {
		TRANSFORM[0].xyz = vec3(1.0, 0.0, 0.0);
		TRANSFORM[1].xyz = vec3(0.0, 1.0, 0.0);
		TRANSFORM[2].xyz = vec3(0.0, 0.0, 1.0);
	}
	if (RESTART_POSITION) {
		TRANSFORM[3].xyz = calculate_initial_position(alt_seed);
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
	}
	if (RESTART_VELOCITY) {
		VELOCITY = get_random_direction_from_spread(alt_seed, spread) * dynamic_params.initial_velocity_multiplier;
	}

	process_display_param(params, 0.0);

	VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
	VELOCITY += EMITTER_VELOCITY * inherit_emitter_velocity_ratio;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
}

void process() {
	uint base_number = NUMBER;
	//if (repeatable) {
	//	base_number = INDEX;
	//}
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);

	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	CUSTOM.y += DELTA / LIFETIME;
	CUSTOM.y = mix(CUSTOM.y, 1.0, INTERPOLATE_TO_END);
	float lifetime_percent = CUSTOM.y / params.lifetime;
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}

	// Calculate all velocity.
	vec3 controlled_displacement = vec3(0.0);
	controlled_displacement += process_orbit_displacement(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA, params.lifetime * LIFETIME);
	controlled_displacement += process_radial_displacement(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);

	process_physical_parameters(physics_params, lifetime_percent);
	vec3 force;
	{
		// Copied from previous version.
		vec3 pos = TRANSFORM[3].xyz;
		force = gravity;
		// Apply linear acceleration.
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * physics_params.linear_accel : vec3(0.0);
		// Apply radial acceleration.
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * physics_params.radial_accel : vec3(0.0);
		// Apply tangential acceleration.
		float tangent_accel_val = physics_params.tangent_accel;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * tangent_accel_val : vec3(0.0);
		force += ATTRACTOR_FORCE;
		force.z = 0.0;
		// Apply attractor forces.
		VELOCITY += force * DELTA;
	}
	{
		// Copied from previous version.
		if (physics_params.damping > 0.0) {
			float v = length(VELOCITY);
			v -= physics_params.damping * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
	}

	// Turbulence before limiting.
	vec3 final_velocity = controlled_displacement + VELOCITY;

	final_velocity.z = 0.0;

	TRANSFORM[3].xyz += final_velocity * DELTA;

	process_display_param(params, lifetime_percent);

	float base_angle = dynamic_params.angle;
	base_angle += CUSTOM.y * LIFETIME * dynamic_params.angular_velocity;
	CUSTOM.x = base_angle * degree_to_rad;
	COLOR = params.color;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	TRANSFORM[3].z = 0.0;

	TRANSFORM[0].xyz *= sign(params.scale.x) * max(abs(params.scale.x), 0.001);
	TRANSFORM[1].xyz *= sign(params.scale.y) * max(abs(params.scale.y), 0.001);
	TRANSFORM[2].xyz *= sign(params.scale.z) * max(abs(params.scale.z), 0.001);

	CUSTOM.z = params.animation_offset + lifetime_percent * params.animation_speed;

	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
	//VELOCITY.xy = is_grounded(VELOCITY.xy);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_b2j7w"]
shader = SubResource("Shader_4ms6p")
shader_parameter/direction = Vector3(0, 1, 0)
shader_parameter/spread = 90.0
shader_parameter/flatness = 0.0
shader_parameter/inherit_emitter_velocity_ratio = 0.0
shader_parameter/initial_linear_velocity_min = 50.0
shader_parameter/initial_linear_velocity_max = 60.0
shader_parameter/directional_velocity_min = 1.0
shader_parameter/directional_velocity_max = 1.0
shader_parameter/angular_velocity_min = 0.0
shader_parameter/angular_velocity_max = 0.0
shader_parameter/orbit_velocity_min = 0.0
shader_parameter/orbit_velocity_max = 0.0
shader_parameter/radial_velocity_min = null
shader_parameter/radial_velocity_max = null
shader_parameter/linear_accel_min = 0.0
shader_parameter/linear_accel_max = 0.0
shader_parameter/radial_accel_min = 0.0
shader_parameter/radial_accel_max = 0.0
shader_parameter/tangent_accel_min = 0.0
shader_parameter/tangent_accel_max = 0.0
shader_parameter/damping_min = 20.0
shader_parameter/damping_max = 40.0
shader_parameter/initial_angle_min = 0.0
shader_parameter/initial_angle_max = 0.0
shader_parameter/scale_min = 1.0
shader_parameter/scale_max = 2.5
shader_parameter/hue_variation_min = 0.0
shader_parameter/hue_variation_max = 0.0
shader_parameter/anim_speed_min = 0.0
shader_parameter/anim_speed_max = 0.0
shader_parameter/anim_offset_min = 0.0
shader_parameter/anim_offset_max = 0.0
shader_parameter/lifetime_randomness = 0.0
shader_parameter/emission_shape_offset = Vector3(0, 0, 0)
shader_parameter/emission_shape_scale = Vector3(1, 1, 1)
shader_parameter/velocity_pivot = Vector3(0, 0, 0)
shader_parameter/emission_sphere_radius = 10.0
shader_parameter/color_value = Color(1, 1, 1, 1)
shader_parameter/gravity = Vector3(0, 98, 0)
shader_parameter/grounded = true

[sub_resource type="RectangleShape2D" id="RectangleShape2D_7aubk"]
size = Vector2(11, 14)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_4oxkd"]
size = Vector2(16, 19)

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_4ovj6"]
radius = 3.06
height = 11.56

[node name="CharacterBody2D" type="CharacterBody2D"]
collision_layer = 2
collision_mask = 13
script = ExtResource("1_jmvu1")
stamina_regen_time = 1.5
stamina_regen_speed = 1.5
speed = 50
jump_speed = 1500
max_stam = 100

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
material = SubResource("ShaderMaterial_5sxy7")
position = Vector2(0, -12)
scale = Vector2(0.439, 0.423)
sprite_frames = SubResource("SpriteFrames_lvf4y")
animation = &"idle"

[node name="BloodParticles" type="GPUParticles2D" parent="AnimatedSprite2D"]
modulate = Color(0.65955, 0, 0.154044, 1)
self_modulate = Color(0.810707, 0, 0.149139, 1)
emitting = false
amount = 25
process_material = SubResource("ShaderMaterial_b2j7w")
one_shot = true
explosiveness = 0.65
randomness = 1.0

[node name="PrimaryAttack" type="Area2D" parent="."]
collision_layer = 8
collision_mask = 12
monitoring = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="PrimaryAttack"]
position = Vector2(0, -8)
shape = SubResource("RectangleShape2D_7aubk")

[node name="SecondaryAttack" type="Area2D" parent="."]
collision_layer = 8
collision_mask = 12
monitoring = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="SecondaryAttack"]
position = Vector2(0, -8)
shape = SubResource("RectangleShape2D_4oxkd")

[node name="PlayerModelCollision" type="CollisionShape2D" parent="."]
position = Vector2(0, -4.405)
shape = SubResource("CapsuleShape2D_4ovj6")

[connection signal="animation_finished" from="AnimatedSprite2D" to="." method="_on_animated_sprite_2d_animation_finished"]
[connection signal="body_entered" from="PrimaryAttack" to="." method="_on_primary_attack_body_entered"]
[connection signal="body_entered" from="SecondaryAttack" to="." method="_on_secondary_attack_body_entered"]
